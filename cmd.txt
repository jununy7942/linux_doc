[GDB]
gdb --pid=pid번호
gdb 프로세스명 코어
which 파일명

thread apply all bt 
bt full

set print element 0

layout split 
: 화면 분리 및 소스보기

layout next
: 변경

ctrl + x + a
: 종료


set print repeats 0


[VALGRIND]
valgrind --tool=memcheck --leak-check=full --show-reachable=yes --leak-resolution=high --error-limit=no --log-file=vallog.2011날짜 프로세스이름

addr2line -fe ~/bin/mssx 0x100000





- find
find [경로] [옵션] [조건] [action]
 [옵션] -name, -user(소유자), -newer(전, 후), -perm(허가권), -size(크기)
 [action] -print(디폴트), -exec(외부명령 실행)
[ 사용 예 ]
find /etc -name "*.conf"        --> /etc 디렉토리 하위에 확장명이 ".conf"인 파일 검색
find /home -user fedora        --> /home 디렉토리 하위에 소유자가 "fedora"인 파일 검색
find ~ -perm 644                   --> 현재 사용자의 홈디렉토리 하위에 허가권이 644인 파 
일 검색
find /bin -size +10k -size -100k        --> /bin 디렉토리 하위에 파일 크기가 10KB~100KB 
인 파일 검색
find ~ -size 0k -exec ls -l { } ＼;     --> 현재 사용자의 홈 디렉토리 하위에 파일 크기가  
0인 파일의 목록을 상세히 출력
find /home -name "*.swp" -exec rm { } ＼;   --> /home 디렉토리 하위에 확장명이 *.swp 인  
파일을 삭제

find . -name "aaaa" -print

find . -type f -print |xargs grep "검색어"

ls |more -수

find . -name "*.c" | xargs grep sctp_send


- grep
grep sctp_send *.c

rgrep sctp_send *.c

egrep "hello|jfd" *

다중문자열 검색
텍스트 파일에서 2개 이상의 문자열을 검색하는 방법이다.

(A and B) 일단 A라는 문자열과 B라는 문자열이 모두 포함된 행을 찾는 것은 간단하다. 파이프(|)를 이용해서, A가 포함된 뿐을 골라낸 후에 거기서 B를 골라내면 된다.
cat file.txt | grep A | grep B

(A or B) A 또는 B가 포함된 행을 찾으려면 A와 B를 파이프(|) 기호로 연결하면 된다. 연산자로 인식하도록 역슬래시(\)를 붙여준다.
cat file.txt | grep "A\|B"

또는 egrep 명령을 활용해도 된다. 작은따옴표(')와 괄호를 이용한다.
cat file.txt | egrep '(A|B)'

만약 shell script에서 변수에 할당된 문자열을 사용하려고 한다면 egrep으로는 어렵고 앞에 언급한 파이프 기호를 이용해야 한다.
str_a="1st string"
str_b="2nd string"
cat file.txt | grep "$str_a\|$str_b"


grep '북숭아\|사과' filename
grep   -i  word  file/dir  대소문자 구분 안하고 다 검색
grep  -n  word  file/dir  라인에 번호 붙여 검색 결과 출력
grep  -w  word  file/dir  딱 그 단어만 검색
grep  -v  word  file/dir  그 단어만 빼고 검색
grep  -l  word  *     파일명이 확실치 않을 때 단어가 들어간 모든 파일 검색
grep  '[A-Z]'   file/dir   대문자가 포함된 모든 파일이나 문자열
grep  '[ABC]'  file/dir   대문자 A B C 중 하나만 포함되어 있으면 다 검색
grep  '[A-Z][A-Z][A-Z]'  file/dir   대문자가 세글자 이상 포함된 모든 파일이나 문자열
grep  '[a-zA-Z]'  file/dir   알파벳 들어 있는 모든 파일이나 문자열
grep -n -v . a.txt 내용없이 엔터친 줄 검색
grep -A number  검색된 이후 라인까지 출력
grep -B number  검색된 이전 라인까지 출력
 
fgrep   '['   file/dir  번역하지 않고 [ 를 검색해달라
 = grep   '[[]'   file/dir
 = grep   '\['   file/dir 
 
문자열에서
'[^A-Z]' 부정. 대문자로만 이루어진 것 빼고 검색
'^A' A로 시작하는 문자열 검색
'A$' A로 끝나는 문자열 검색
. 은 한글자



- 링크
ln -s /usr/local/tap64-2.1.0 tap


- nm
nm 파일이름
라이브러리, 컴파일된 오브젝트 모듈, 실행파일 등 바이너리를 검사해서 저장된 내용 또는 메타정보 표시


- vi 화면 분할
:sp [file]
:vs [fild] 
ctrl+w

- vi 실행중 명령어 입력 :  :!명령어


- vi 찾은 문자열 라인 삭제
:g/문자열/d    => 특정문자열이 포함된 줄 삭제
:v/문자열/d    => 특정문자열이 없는 줄 삭제
:숫자,숫자d    => 줄번호로 삭제 ex) 5,33d => 5번째 줄부터 33번째 줄 삭제




- VI Marking 기능
Ctrl + ] / Ctrl + O / Ctrl + I 
m을 친 후 a~z까지 입력, 호출 '를 입력한 후 a~z를 입력



- 프로세스 정보를 알고 싶을때(명령어를 함수로 쓰고 싶을때)
int pid; 
char buf[256]; 
FILE* fp = popen( "ps -C kkk", "r" ); 
fgets( buf, 255, fp ); 
fscanf( fp, "%d", &pid ); 
pclose( fp );


set str=`date '+%y%m%d'`
eho $str
echo `valgrind ~~~~`
`-> 실행


#!/bin/csh


- 달력
date | awk '{print "year:" $1 , "month:"$2}'
option: NR,NF


- sed
sed '명령어' [파일명]
sed '1,3p' phon
명령어
p, d, r, w, a\, i\
option: -n, -e

:% g/\<ting\>/d 라고 하면 ting 앞 뒤로 알파벳이 붙지 않은 오직 ting 이라는 단어만 들어 있는 줄을 삭제

^xxx xxx 제외

sed -i 's/SYSTEM_TARGET_HOME/USER_TARGET_HOME/g' aaa
sed -i '/AAA/d' BBBB 

sed -i '/^.$/d' aaa
: 공백 삭제





awk
awk는 직접 사용자로부터 입력을 받거나 아니면 지정한 파일을 가공하여 표준 출력한다
표준 출력을 리다이렉션할 수 있다 
awk [option] [-F] ['{script}']
ls -l |grep "a.c" | awk '{print "vi " $9}' > test.sh
cat num | awk '{print "echo "$1"; grep "$1" asr_rar.bk | wc -l"}' | sh

free -m | awk 'NR==2{printf "memory %.2f%\n", $3*100/$2}'



mseg
다른 터미널의 사용자가 당신에게 write명령 등으로 메시지를 보낼수 있는지 결정

wall
현재 시스템에 로그온되어 있는 모든 사용자에게 메시지를 보낸다.

traceroute
연결하려는 특정 host까지의 경로를 확인할 수 있다

route
시스템의 라우팅 테이블 정보를 추가, 삭제 할수 있다.


nslookup
인터넷 도메인 네임서버에게 특정 호스트에 대한 정보를 문의하는프로그램
nslookup www.chosun.com
Server:sevims.seri.re.kr


arp
네트워크 기반으로 컴퓨터간의 통신은 실제로 MAC address를 통해서 통신


arch
해당 시스템이 실행되고 있는 장비의 아키텍쳐를 보여준다.


cal
달력을 보여줌

df
디스크 공간

du
디렉토리 공간


free
스왑, 메모리에 대한 정보


reboot
시스템 리부팅


su
다른 사용자 계정으로 서브셸 생성

finger
시스템 상의 사용자들에 대한 정보를 보여준다.

logname

uptime
서버관리자가 서버의 전체적인 부하율을 확인하고자 할때에 사용한다.


w, who
현재 접속중인 사용자

who am i
자신의 정보

id 
등록된 id


pwd
현 디렉토리



ldd shared_library
공유라이브러리 의존성을 확인하는데 특화된 프로그램


LD_TRACE_LOADED_OBJECTS=1 실행프로그램
실행한 시점부터 실시간 공유라이브러리 의존성을 확인. 



바이너리 정보 확인

objdump -p 실행파일
파일의 정보들을 추출하여 그 내용을 보여주는 툴

readelf -d 실행파일
readelf -h (ELF 헤더 확인)  
readelf -l (Program 헤더 확인)  
readelf -S (Section 헤더 확인) 
readelf -s (심볼 테이블 확인) 




write cscf  pts/23 \n 메시지 내용.


- 압축
tar -cvf test.tar ./test
tar -xvf test.tar

-c: tar파일을 생성
-v: 생성되는 파일절차를 보여준다.
-f: 파일의 이름을 지정해주는 옵션
-z: gzip에 현재 tar를 넘겨 압축한다.
-t: 파일을 풀지않고 묶여 있는 파일의 내용을 확인 가능.

tar cvzf testTar.tar.gz /practice/testTar
tar xvzf testTar.tar.gz

묶음 내용 미리보기
tar tvf file.tar

1. 첫번째 압축후 분할
    tar cvf(z) 압축파일명 대상디렉토리or파일
    로 압축한뒤
    split -b 용량 압축화일명 분할압축화일명

    이렇게 하면 분할압축화일명aa,분할압축화일명ab  혹은 분할압축화일명a,분할압축화일명b 로 생성된다.

    예)
      tar cvf aaa.tar /home/aaa/www
      split -b 10m aaa.tar aaasp.tar

      만들어진 파일 aaasp.taraa, aaasp.tarab ...............

2. 한번에 분할
    1번인 경우 문제가 좀 있다. tar 압축은 2G 이상 지원하지 않는다.
    따라서 압축결과물이 2G 이상인 경우 제대로 동작하지 않을수 있다.
    방법은 간단히 파이프로 전달하면 된다.
    
    tar cvf(z) - 대상디렉토리or파일 | split -b 용량 - 분할압축파일명

    예)
      tar cvf - /home/aaa/www | split -b 2000m - aaasp.tar

      만들어진 파일 aaasp.taraa, aaasp.tarab

3. 압축해제... 일반적인 방법으로 풀면 된다.
     
    tar xvf aaasp.taraa
    ...

    분할된 파일이 많아서 귀찮다면 파이프를 이용하자

    cat aaasp.tar* | tar xvf -

4. 분할된 화일 합치기...
    분할된 압축 파일을 하나로 합치고 싶다면 (주의 2G 제한) ...
    아래와 같이 해주면 된다.

    cat aaasp.tar* > aaa.tar


5. gzip 옵션을 붙여도 같은 방식으로 하면된다.


gzip
gzip -d 파일이름
gzip -숫자 파일이름 *


커서이동
h(왼쪽),j(아래),k(위),l(오른쪽)
b(왼쪽), w(오른쪽) 한단어씩 이동
행처음: ^
행끝: $
블럭단위: (), {}, []
마지막행 이동: G
첫행 이동: g



:%s/boolean/bool/g  치환 바꾸기
:.,$ s/_RCV/_SND/gc
:,$ s/AAA/BBB/gc 현재위치에서 치환

모든 파일에서 변경하기
find * -exec perl -pi -e 's/찾을문자열/바꿀문자열/g' {} \;

* /home/www 디렉토리(하위 디렉토리 포함) 모든 파일을 체크해서 aaa 문자열을 bbb 로 변경 
find /home/www -type f -name '*' -exec perl -pi -e 's|aaa|bbb|g' {} \;

find ./ -name "filename" -exec perl -pi -e 's/aaa/bbb/g' {} \;




ctags -R

ctags --help

find tags



파이프(pipe)

두 개의 프로그램을 연결해 주는 연결통로의 의미
 "| " 문자를 사용함.
 [사용 예]
ls -l /etc | more        --> "ls -l /etc" 명령을 입력하면 파일이 너무 많아서,

                                        페이지가 넘어가므로 한 개 페이지씩 보겠다는 의미
 


 필터(filter)

필요한 것만 걸러 주는 명령어
grep, tail, wc, sort 등
주로 파이프와 같이 사용된다.
 [사용 예]
ps -ef | grep bash     --> "ps -ef"는 모든 프로세스 번호를 출력하므로,
ps -aux | grep cscf
                                         "bash" 라는 글자가 들어간 프로세스만 출력
 

시스템 설정(system-config-xxx)

 초기 부팅 설정 - system-config-boot
 방화벽 설정 - system-config-firewall      --> 외부에 서비스를 하기 위해서 포트를 열어 줄 때 사용.
 네트워크 설정 - system-config-network
 서비스의 가동/중지 설정 - system-config-services
 네임 서버 설정 - system-config-bind
 웹 서버 설정 - system-config-httpd
 NFS 서버 설정 - system-config-nfs
 삼바 서버 설정 - system-config-samba
 FTP 서버 설정 - system-config-vsftpd


경로 출력
which [명령어]


파일 비교
diff, diff3, cmp, comm


pstack : process stack 출력



while을 이용한 scripts
while [ 1 ]

do
pmap processID | grep heap //heap 영역 검사
pmap processID | grep stack // stack 영역 검사
pmap 5 // 5초마다
    done

    exit 0


dmesg
부팅시에 하드웨어적인 에러 파악
시스템의 부팅과정에서 출력된 메시지

cat /var/log/messages
운영중에 장애난 사항 파악
시스템의 작동 메시지나 데몬들의 에러로그



리눅스 서버 IP 주소 할당
ifconfig eth0 up
ifconfig eth0 down
ifconfig eth0 211.35.72.201 netmask 255.255.255.128 broadcast 211.35.72.255 up



netstat -atp   : TCP 
netstat -aup   : UDP 
netstat -anp

netstat -rv :routing table 정보

netstat -rn : main table (Kernel IP routing table)


cat /etc/hosts
:호스트에 대한 정보






1. 네트워크 관련 장치 확인 
 
setup / system-config-network 명령 이용
 
네트워크 설정 -> 장치설정 -> eth0 (eth0 - Ethernet) -> 네트워크설정에서 DHCP 사용 을 선택하지 않은경우 IP주소를 수동으로 설정
 
 
 
setup 명령으로 DNS설정
 
네트워크 설정 -> DNS 설정-> 호스트명, DNS 서버 설정
 
 
 
2. 네트워크 설정 파일을 이용한 설정
 
호스트 이름 설정 - /etc/sysconfig/network
 
- 네트워크 설정 정보를 저장하는 파일, 네트워크 현재상태, 호스트 이름, 게이트웨이 주소가 저장됨
 
 
 
네트워크인터페이스 - /etc/sysconfig/network-script/ifcfg-eth?
 
 
 
IP주소와 호스트 이름 매핑 - /etc/hosts
 
- 중요한 호스트의 IP주소와 URL을 저장하여 DNS조회 없이 접속하도록 하는 파일
 
 
 
DNS 서버 설정 - /etc/resolv.conf
 
- DNS 서비스를 수행하는 서버의 URL을 설정하는 파일
 
 
 
도메인 주소 검색 우선 순위 설정 - /etc/host.conf
 
- 호스트 이름에 대한 IP주소 검색을 /etc/hosts파일에서 먼저 검색할 것인지, 네임서버(bind)에게 먼저 요청할 것인지를 설정
 
우선순위 : hosts > bind
 
 
 
3. 네트워크 데몬 실행 - /etc/init.d/network
 
- 네트워크 설정을 변경한 후에는 네트워크 서비스 프로그램을 재시작 해야 변경된 설정 내용이 적용된다
 
 
 
 
 
 
 
리눅스 네트워크 기본 명령어

ifconfig : IP주소의 설정 상태 확인
ifconfig eth? up/down : 랜카드의 활성화/비활성화
ifconfig eth? promisc : 랜카드의 프러미큐어스 모드 설정
 
 
 
ping : 대상 호스트가 응답할 수 있는 상태인지 확인
 
옵션 : -s(packetsize) -i(interval) -c(count) -t(ttl)

ping6 -I interface IP 
 
 
netstat :  네트워크 연결정보, 라우팅 정보, 포트 정보, 패킷 통계 확인
 
옵션 : -r(display routing table) -i(display interfaces) -s(display networking statistics) -p(display PID/Program name for socket)
 
 
 
arp : arp테이블을 보여줌


옵션 : -a/-e(display all hosts) -s(set a new arp entry) -d(delete a specified entry)
 
 
 
nslookup : DNS 서버에 특정 호스트의 IP주소나 호스트 이름을 질의하는 명령
 
 
 
dig : DNS 서버에 특정 호스트의 IP주소나 호스트 이름을 질의하는 명령(nslookup보다 상세하게 보여줌) 



ntohs() : 포트번호를 Network byte → Host byte 순서로
ntohl() : IP주소를 Network byte → Host byte 순서로
htons() : 포트번호를  Host byte → Network byte 순서로
htonl() : IP주소를  Host byte → Network byte 순서로


htonl()함수는 long intger(일반적으로 4byte)데이터를 네트워크 byte order로 변경한다.
htons()함수는 short intger(일반적으로 2byte)데이터를 네트워크 byte order로 변경한다.
ntohl()함수는 long intger 데이터를 호스트 byte order로 변경한다.
ntohs()함수는 short intger 데이터를 호스트 byte order로 변경한다


단어수 
wc
-c: 문자수
-m: 캐릭터수
-l: 라인수
-w: 단어수
-L: 가장긴 문장 길이



.vimrc
map <F12> :!/opt/ibm/RationalSDLC/clearcase/linux_x86/bin/cleartool co %<CR>
map <S-F12> :!/opt/ibm/RationalSDLC/clearcase/linux_x86/bin/cleartool ci %<CR>




[ulimit]
ulimit는 셸 로깅하는 모든 유저에 대해 제한할 수 있으며 이 제한은 root도 포함된다는 점에서 PAM과는 차이가 있다. ulimit가 제공하는 옵션 중 중요한 몇가지만 알아보자.

-S
 soft하게 시스템 자원을 제한한다.
 
-H
 엄격하게 시스템 자원을 제한한다. 일반 유저는 soft limit를 변경할 수 있지만 최대 hard limit 이상은 넘을 수 없다. Hard limit는 오직 root만이 변경할 수 있다.
 
-a
 현재의 모든 제한사항을 보여준다.
 
-m
 K byte단위로 물리적인 메모리를 정의한다.
 
-t
 초단위로 최대 CPU 시간을 설정한다.
 
-f
 셸에서 생성 가능한 최대 파일 사이즈를 정의한다.
 
-u
 유저프로세스의 최대값을 정의한다.
 
-v
 가상 메모리의 크기를 정의한다.

- user level
/etc/security/limits.conf

- 전체
/proc/sys/fs/file-max



/proc/sys/net/core/wmem_default
/proc/sys/net/core/rmem_default





[현재 사용중인 Port 확인을 위한 리눅스 명령어]
lsof -i -nP







[chown]
chown [-R] root:cscf [file_name]
chown -R root:ips1 mipsecx
chmod u+s mipsecx



[traceroute]
: 경로 출력
traceroute destination-hostname
traceroute naver.com



[sysctl]
/etc/sysctl.conf

/sbin/sysctl -a : 설정확인
/sbin/sysctl -n kernel.hostname
/sbin/sysctl -w kernel.domainname="example.com"
/sbin/sysctl -p /etc/sysctl.conf



[bonding]
/etc/sysconfig/network-scripts
/etc/modprobe.conf
/sys/classs/net
/proc/net/bonding
/sys/devices/virtual/net

- 본딩 설정
modprobe bonding
service network restart

- 모듈 확인
lsmod

- 모듈 적재
insmod

- 모듈 삭제
rmmod



- 드라이버 확인
lspci

- 바이오스 device 정보
biosdevname -d

- 현재 본딩 정보
cat /proc/net/bonding/bond[x]
ip link

- bios 정보 출력
dmidecode


- pci for an interface
ethtool -i eth0




[동기화]
rsync -av src/ dest




[계정 생성]

- useradd 계정명
useradd testuser
cat /etc/passwd | grep testuser
cat /etc/group

echo 'P@ssw0rd' | passwd --stdin testuser

- useradd 계정명 -G 그룹명

- useradd 계정명 -u 사용자아이디

useradd jununy7942 -g telcoware -s /bin/csh  -c 'Clearcase' -d /home/jununy7942

passwd jununy7942


[root 권한 부여]

/etc/sudoers (sudo 권한 부여하기)
/etc/group (root 그룹 부여하기)
/etc/passwd (root의 uid, gid로 변경)


[ssh(sshd_config) 특정 유저 접속 차단/허용]

1 설정파일을 편집한다. 
   
 #vi /etc/ssh/sshd_config  
  
2 설정 파일에 다음 항목으로 설정해준다.
   
AllowGroups : 접속을 허용할 그룹
AllowUsers   : 접속을 허용할 유저
DenyGroups  : 접속을 차단할 그룹
DenyUsers    : 접속을 차단할 유저

/etc/rc.d/sshd retart



[OS 버젼 확인]
$ cat /etc/redhat-release
$ cat /proc/version
$ uname -a



[부팅 또는 종료 자동 실행]
- update-rc.d [-n | -f] <스크립트명> [remove | defaults] <실행순서>

- sample이라는 스크립트를 /etc/init.d에 넣고 다음과 같은 명령
update-rc.d sample defaults

- 98 번째 실행하고 싶다면
update-rc.d sample defaults 98

- 종료 순서는 2 번째
update-rc.d sample defaults 98 02

- 삭제하는 방법
update-rc.d sample remove

- 실제 링크되어 있는 파일을 먼저 지워야 한다는 것인데, 같이 지울려면 
update-rc.d -f sample remove

- 실행 파일
/sbin/init : init가 실행해야 할 모든 일이 명시된 파일
/etc/init.d/rc : 각 실행 단계 스크립트
/etc/init.d/rcS : init에서 처음으로 실행하는 스크립트

- 디렉토리
/etc/init.d : 각 실행 단계에서 실행되는 실제 스크립트가 저장
/etc/rcS.d : rcS 스크립트에 의해 실행되어질 명령 목록
/etc/rc0.d : 0 번 단계에서 실행되어질 명령 목록
/etc/rc1.d : 1 번 단계에서 실행되어질 명령 목록
/etc/rc2.d : 2 번 단계에서 실행되어질 명령 목록
/etc/rc3.d : 3 번 단계에서 실행되어질 명령 목록
/etc/rc4.d : 4 번 단계에서 실행되어질 명령 목록
/etc/rc5.d : 5 번 단계에서 실행되어질 명령 목록
/etc/rc6.d : 6 번 단계에서 실행되어질 명령 목록


case $1 in
 start)
   <실행할 명령이나 스크립트명>
   ;;
 stop)
   <중지할 명령이나 스크립트명>
   ;;
 restart)
   <중지하고 다시 시작할 명령이나 스크립트명>
   ;;
 *)
   echo "Usage: /etc/init.d/$NAME {start|stop|restart}"
   exit 1;
   ;;
esac 

exit 0




- vim 파일 브라우져

let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_browse_split = 4
let g:netrw_altv = 1
let g:netrw_winsize = 25
augroup ProjectDrawer
  autocmd!
  autocmd VimEnter * :Vexplore
augroup END



- Time서버와 동기화
rdate -s Time서버

hwclock --show

